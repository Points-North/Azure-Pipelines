# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# update-db-connection.yml
# Developed by Hans Dickel
# Root Repo geekfog/Azure-Pipelines
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops

parameters:
  FilePath: ''
  ConnectionName: 'sqlconnection'
  ServerName: ''
  InitialCatalog: ''
  UserID: ''
  Password: ''
  Debug: 'no'

steps:
- task: PowerShell@2
  displayName: '${{ parameters.DisplayName }}'
  inputs:
    targetType: Inline
    script: |
      $filePath = "${{ parameters.FilePath }}"
      $connectionName = "${{ parameters.ConnectionName }}"
      $newServer = "${{ parameters.ServerName }}"
      $newInitialCatalog = "${{ parameters.InitialCatalog }}"
      $newUserID = "${{ parameters.UserID }}"
      $newPassword = "${{ parameters.Password }}"
      $debug = ("${{ parameters.Debug }}").ToLower()
      $isDebug = ($debug -eq '1' -or $debug -eq 'yes' -or $debug -eq 'true')

      # Load the XML file
      [xml]$xml = Get-Content $filePath

      # Find the connectionStrings node
      $connectionStrings = $xml.configuration.connectionStrings

      if ($connectionStrings) {
          # Find the connection string to update
          $connection = $connectionStrings.add | Where-Object { $_.name -eq $connectionName }

          if ($connection) {
              # Parse the existing connection string
              $connectionString = $connection.connectionString
              $connectionStringParts = $connectionString -split ";"

              # Update the relevant parts
              foreach ($part in $connectionStringParts) {
                  if ($part -ilike "Server=*") {
                      $part = "Server=$newServer"
                  } elseif ($part -ilike "Initial Catalog=*") {
                      $part = "Initial Catalog=$newInitialCatalog"
                  } elseif ($part -ilike "User ID=*") {
                      $part = "User ID=$newUserID"
                  } elseif ($part -ilike "Password=*") {
                      $part = "Password=$newPassword"
                  }
              }

              # Reconstruct the connection string
              $newConnectionString = [string]::Join(";", $connectionStringParts)
              $connection.connectionString = $newConnectionString

              # Save the updated XML back to the file
              $xml.Save($filePath)
              Write-Output "Updated connection string for '$connectionName'."
          } else {
              Write-Output "Connection string with name '$connectionName' not found."
          }
      } else {
          Write-Output "connectionStrings section not found in the configuration file."
      }

      Exit 0

# ~End~